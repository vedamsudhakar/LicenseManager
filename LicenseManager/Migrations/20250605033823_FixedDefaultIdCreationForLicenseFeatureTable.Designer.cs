// <auto-generated />
using System;
using LicenseManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LicenseManager.Migrations
{
    [DbContext(typeof(LicenseManagerContext))]
    [Migration("20250605033823_FixedDefaultIdCreationForLicenseFeatureTable")]
    partial class FixedDefaultIdCreationForLicenseFeatureTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LicenseManager.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Applicat__3214EC07BAD0BE80");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("LicenseManager.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Clients__3214EC0776FDC569");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("LicenseManager.Models.ClientApplicationLicensedFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Features")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("FkClientApplicationMappingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FK_ClientApplicationMappingId");

                    b.HasKey("Id");

                    b.HasIndex("FkClientApplicationMappingId");

                    b.ToTable("ClientApplicationLicensedFeatures");
                });

            modelBuilder.Entity("LicenseManager.Models.ClientApplicationMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("ActivationsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FK_ApplicationId");

                    b.Property<Guid>("FkClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FK_ClientId");

                    b.Property<string>("LicenseId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__ClientAp__3214EC074B5C0135");

                    b.HasIndex("FkApplicationId");

                    b.HasIndex("FkClientId");

                    b.ToTable("ClientApplicationMapping", (string)null);
                });

            modelBuilder.Entity("LicenseManager.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkFeatureGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FK_FeatureGroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FkFeatureGroupId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("LicenseManager.Models.FeatureGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__FeatureG__3214EC07AF331C17");

                    b.ToTable("FeatureGroups");
                });

            modelBuilder.Entity("LicenseManager.Models.ClientApplicationLicensedFeature", b =>
                {
                    b.HasOne("LicenseManager.Models.ClientApplicationMapping", "FkClientApplicationMapping")
                        .WithMany("ClientApplicationLicensedFeatures")
                        .HasForeignKey("FkClientApplicationMappingId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientApplicationLicensedFeatures_ClientApplicationMapping");

                    b.Navigation("FkClientApplicationMapping");
                });

            modelBuilder.Entity("LicenseManager.Models.ClientApplicationMapping", b =>
                {
                    b.HasOne("LicenseManager.Models.Application", "FkApplication")
                        .WithMany("ClientApplicationMappings")
                        .HasForeignKey("FkApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientApplicationMapping_Applications");

                    b.HasOne("LicenseManager.Models.Client", "FkClient")
                        .WithMany("ClientApplicationMappings")
                        .HasForeignKey("FkClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientApplicationMapping_Clients");

                    b.Navigation("FkApplication");

                    b.Navigation("FkClient");
                });

            modelBuilder.Entity("LicenseManager.Models.Feature", b =>
                {
                    b.HasOne("LicenseManager.Models.FeatureGroup", "FkFeatureGroup")
                        .WithMany("Features")
                        .HasForeignKey("FkFeatureGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Features_FeatureGroups");

                    b.Navigation("FkFeatureGroup");
                });

            modelBuilder.Entity("LicenseManager.Models.Application", b =>
                {
                    b.Navigation("ClientApplicationMappings");
                });

            modelBuilder.Entity("LicenseManager.Models.Client", b =>
                {
                    b.Navigation("ClientApplicationMappings");
                });

            modelBuilder.Entity("LicenseManager.Models.ClientApplicationMapping", b =>
                {
                    b.Navigation("ClientApplicationLicensedFeatures");
                });

            modelBuilder.Entity("LicenseManager.Models.FeatureGroup", b =>
                {
                    b.Navigation("Features");
                });
#pragma warning restore 612, 618
        }
    }
}
